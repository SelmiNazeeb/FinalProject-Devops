version: 0.2

env:
  variables:
    ACCOUNT_ID: 137068239975
    REGION: us-east-2
    FRONTEND_REPO: frontendnew
    BACKEND_REPO: backendnew
    FRONTEND_DIR: frontend
    BACKEND_DIR: backend
    K8S_MANIFEST_DIR: k8s # Updated to reflect your k8s directory structure
    SONAR_HOST_URL: "http://54.197.6.225"
    SONAR_PROJECT_KEY: my-backend-project
    SONAR_TOKEN: "sqp_1287d53b6904bd1c8fcc3a4251570374b0d3fee2"
    

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo Installing utilities...
      - yum install -y jq
      - echo Installing SonarScanner...
      - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
      - unzip sonar-scanner.zip
      - export PATH=$PWD/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin:$PATH

  pre_build:
    commands:
      - echo Setting dynamic image tag...
      - export IMAGE_TAG=latest
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
      - echo Installing frontend and backend dependencies...
      - cd $FRONTEND_DIR && npm install && cd -
      - cd $BACKEND_DIR && npm install && cd -

  build:
    commands:
      - echo Building Docker images...
      - docker build -t $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_DIR
      - docker tag $FRONTEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker build -t $BACKEND_REPO:$IMAGE_TAG $BACKEND_DIR
      - docker tag $BACKEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG
      - echo Running SonarQube scan for backend...
      - cd $BACKEND_DIR
      - sonar-scanner \
          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN
      - cd -

  post_build:
    commands:
      - echo Pushing Docker images to ECR...
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

      - echo Preparing Kubernetes manifest output directory...
      - mkdir -p k8s-out

      # --- FRONTEND ---
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/09-frontend-deployment.yaml > k8s-out/frontend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/10-frontend-service.yaml k8s-out/frontend-service.yaml

      # --- BACKEND ---
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/07-backend-deployment.yaml > k8s-out/backend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/08-backend-service.yaml k8s-out/backend-service.yaml

      # --- DATABASE, SECRETS, CONFIGMAP, NAMESPACE ---
      - cp $K8S_MANIFEST_DIR/00-namespace.yaml k8s-out/namespace.yaml || true
      - cp $K8S_MANIFEST_DIR/01-configmap.yaml k8s-out/configmap.yaml || true
      - cp $K8S_MANIFEST_DIR/02-secrets.yaml k8s-out/secrets.yaml || true

      # --- INGRESS, HPA, NETWORK POLICY ---
      - cp $K8S_MANIFEST_DIR/11-ingress.yaml k8s-out/ingress.yaml || true
      - cp $K8S_MANIFEST_DIR/13-network-policy.yaml k8s-out/network-policy.yaml || true

      # --- DEBUG ---
      - echo "Final list of generated Kubernetes YAML files:"
      - find k8s-out/

artifacts:
  base-directory: k8s-out
  discard-paths: yes
  files:
    - '**/*.yaml'

cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'backend/node_modules/**/*'
