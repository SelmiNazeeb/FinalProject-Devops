AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Enhanced AWS architecture with VPC, EKS, ALB, RDS (Multi-AZ), S3,
  CloudWatch, Security Groups, NACLs, IAM roles, and backup routines. This
  template is self-sufficient and creates all necessary resources.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Networking Configuration
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: Database Configuration
        Parameters:
          - DBInstanceType
          - DBAllocatedStorage
          - DBUser
          - DBPassword
          - DBName
      - Label:
          default: EKS Configuration
        Parameters:
          - EKSClusterName
          - EKSDesiredSize
          - EKSMaxSize
          - EKSMinSize

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for Public Subnet 1.

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 2.

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Private Subnet 1.

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Private Subnet 2.

  DBInstanceType:
    Type: String
    Default: db.t3.micro
    Description: The EC2 instance type for the RDS DB instance.
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t4g.micro

  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: The size of the database (in GiB).
    MinValue: 20

  DBUser:
    Type: String
    NoEcho: true
    Description: Master username for the RDS database.
    Default: postgres

  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Default: task0987

  DBInstanceIdentifier:
    Type: String
    Default: task-db-postgres

  DBName:
    Type: String
    Default: taskflow_db
    Description: The name of the database.

  EKSClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name for the EKS Cluster.

  EKSAdminIAMArn:
    Type: String
    Description: arn:aws:iam::390403857216:user/terraform-user

  EKSDesiredSize:
    Type: Number
    Default: 2
    Description: Desired number of instances in the EKS Node Group.

  EKSMaxSize:
    Type: Number
    Default: 4
    Description: Maximum number of instances in the EKS Node Group.

  EKSMinSize:
    Type: Number
    Default: 1
    Description: Minimum number of instances in the EKS Node Group.
Resources:
  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSClusterRole

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  # NAT Gateway and EIP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGatewayEIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0

  # Route Table Associations
  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  # Network Access Control Lists (NACLs)
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicNACL

  PublicInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PublicOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateNACL

  PrivateInboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PrivateOutboundNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # NACL Subnet Associations
  PublicSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  # Security Groups
  SecurityGroupEKSWorkers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSWorkersSG

  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB connections from EKS worker nodes
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSG

  # EKS Worker Ingress Rules 
  EKSWorkersIngressSelfClusterTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow all traffic within the EKS worker nodes SG

  # RDS Ingress from EKS Workers
  RDSIngressFromEKSWorkers:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupRDS.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt SecurityGroupEKSWorkers.GroupId
      Description: Allow MySQL traffic from EKS worker nodes
  # RDS DB Subnet Group
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBSubnetGroup

  # RDS Instance
  MyRDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBInstanceClass: !Ref DBInstanceType
      Engine: postgres
      EngineVersion: '15.13'
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2
      StorageEncrypted: true
      MultiAZ: true
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-05:00
      EnablePerformanceInsights: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSDBInstance

  # EKS Cluster
  MyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !GetAtt SecurityGroupEKSWorkers.GroupId
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
        AccessEntries:
          - PrincipalArn: !Ref EKSAdminIAMArn
            AccessPolicies:
              - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
                AccessScope:
                  Type: cluster
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSCluster

  # EKS Nodegroup IAM Role
  MyEKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EKSNodegroupRole

  # EKS Node Group
  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyEKSCluster
      NodeRole: !GetAtt MyEKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref EKSDesiredSize
        MaxSize: !Ref EKSMaxSize
        MinSize: !Ref EKSMinSize
      Labels:
        app: my-app
      Tags:
        Name: !Sub ${AWS::StackName}-EKSNodeGroup
 # CloudWatch Log Group for EKS
MyEKSLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/eks/${EKSClusterName}/cluster
    RetentionInDays: 7
    Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EKSLogGroup

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref MyVPC

  PublicSubnet1Id:
    Description: The ID of Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: The ID of Public Subnet 2
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: The ID of Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: The ID of Private Subnet 2
    Value: !Ref PrivateSubnet2

  RDSDBEndpointAddress:
    Description: The address of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Address

  RDSDBEndpointPort:
    Description: The port of the RDS database endpoint
    Value: !GetAtt MyRDSDB.Endpoint.Port

  EKSClusterName:
    Description: The name of the EKS Cluster
    Value: !Ref MyEKSCluster

  EKSClusterEndpoint:
    Description: The endpoint of the EKS Cluster
    Value: !GetAtt MyEKSCluster.Endpoint
