AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Three-tier infrastructure: VPC + EKS + RDS PostgreSQL with public/private subnets,
  IGW, NAT Gateway, route tables, security groups, IAM roles, etc.

Parameters:
  ClusterName:
    Type: String
    Default: three-tier-eks-cluster
  NodeGroupName:
    Type: String
    Default: app-node-group
  NodeInstanceType:
    Type: String
    Default: t3.medium
  NodeDesiredCapacity:
    Type: Number
    Default: 2
  NodeMinSize:
    Type: Number
    Default: 1
  NodeMaxSize:
    Type: Number
    Default: 3
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "ustweb"
    Description: >Optional SSH key for worker nodes
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  PublicSubnet3CIDR:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.101.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.102.0/24
  PrivateSubnet3CIDR:
    Type: String
    Default: 10.0.103.0/24
  DBInstanceIdentifier:
    Type: String
    Default: task-db-postgres
  DBName:
    Type: String
    Default: taskflow_db
  DBUsername:
    Type: String
    Default: postgres
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8

Conditions:
  HasKeyPair: !Not [ !Equals [ !Ref KeyPairName, "" ] ]

Resources:

  ### VPC, Subnets, Internet Gateway, NAT, RouteTables, Associations ###
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (for NAT Gateway, Load Balancers)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-1"
        - Key: "kubernetes.io/role/elb"
          Value: "1" # Required tag for EKS to auto-discover ELB subnets

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-2"
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [2, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-3"
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  # Private Subnets (for EKS worker nodes and internal resources)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-1"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1" # Required tag for EKS to auto-discover internal ELB subnets
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned" # Required tag for EKS

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-2"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [2, !GetAZs !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-subnet-3"
        - Key: "kubernetes.io/role/internal-elb"
          Value: "1"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"

  # Route Tables and Associations
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway for Private Subnets Internet Access
  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachInternetGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway should be in a public subnet
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-nat-gateway"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # --- Security Groups ---

  # Security Group for the EKS control plane (allows communication with worker nodes)
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster control plane communication.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow worker nodes to communicate with the EKS API server
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId # Referencing the node security group
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-cluster-sg"
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: "owned"
  ### Security Groups ###
  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Worker Nodes SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt EKSClusterSecurityGroup.GroupId
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId
        - !If
          - HasKeyPair
          - IpProtocol: tcp; FromPort: 22; ToPort: 22; CidrIp: 0.0.0.0/0
          - !Ref "AWS::NoValue"

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Control Plane SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId

  ### RDS-specific Networking ###
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt EKSNodeSecurityGroup.GroupId

  ### IAM and RDS Monitoring Role ###
  RDSEnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: monitoring.rds.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: /

  ### DB Subnet Group ###
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub "${DBInstanceIdentifier}-subnet-group"
      DBSubnetGroupDescription: "Subnet Group for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name; Value: !Sub "${DBInstanceIdentifier}-subnet-group"
        - Key: Project; Value: CloudOps-Demo

  ### RDS Instance ###
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.13'
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups: [!Ref DBSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSEnhancedMonitoringRole.Arn
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      DeletionProtection: false
      Tags:
        - Key: Name; Value: !Ref DBInstanceIdentifier
        - Key: Project; Value: CloudOps-Demo
        - Key: Environment; Value: Demo

  ### EKS Cluster and Node Group ###
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: …
      ManagedPolicyArns:
        - AmazonEKSClusterPolicy
        - AmazonEKSVPCResourceController

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: …
      ManagedPolicyArns:
        - AmazonEKSWorkerNodePolicy
        - AmazonEC2ContainerRegistryReadOnly
        - AmazonEKS_CNI_Policy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]
        SecurityGroupIds: [!GetAtt EKSClusterSecurityGroup.GroupId]
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Version: "1.28"

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
      InstanceTypes: [!Ref NodeInstanceType]
      AmiType: AL2_x86_64
      DiskSize: 20
      RemoteAccess:
        Ec2SshKey: !If [HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
        SourceSecurityGroups: [!GetAtt EKSNodeSecurityGroup.GroupId]
      Labels:
        app: three-tier
        environment: dev
      Tags:
        - Key: Name; Value: !Sub "${ClusterName}-nodegroup"
        - Key: eks.amazonaws.com/cluster-name; Value: !Ref ClusterName

Outputs:
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
    Export: { Name: !Sub "${AWS::StackName}-ClusterEndpoint" }

  DBEndpoint:
    Value: !GetAtt DBInstance.Endpoint.Address
    Export: { Name: !Sub "${AWS::StackName}-DBEndpoint" }

  DBPort:
    Value: !GetAtt DBInstance.Endpoint.Port
    Export: { Name: !Sub "${AWS::StackName}-DBPort" }
