version: 0.2

env:
  variables:
    ACCOUNT_ID: 390403857216
    REGION: us-east-1
    FRONTEND_REPO: frontendnew
    BACKEND_REPO: backendnew
    FRONTEND_DIR: frontend
    BACKEND_DIR: backend
    K8S_MANIFEST_DIR: k8s
    EKS_CLUSTER_NAME: eks-cluster-3Tier1
    IAM_USER_ARN: arn:aws:iam::390403857216:user/terraform-user

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo Installing utilities...
      - yum install -y jq curl unzip
      - echo Installing kubectl...
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl && mv kubectl /usr/local/bin/
      - echo Installing yq...
      - wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
      - chmod +x /usr/bin/yq

  pre_build:
    commands:
      - echo Setting dynamic image tag...
      - export IMAGE_TAG=v1.${CODEBUILD_BUILD_NUMBER}
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
      - echo Installing frontend and backend dependencies...
      - cd $FRONTEND_DIR && npm install && cd -
      - cd $BACKEND_DIR && npm install && cd -

  build:
    commands:
      - echo Building Docker images...
      - docker build -t $FRONTEND_REPO:$IMAGE_TAG $FRONTEND_DIR
      - docker tag $FRONTEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker build -t $BACKEND_REPO:$IMAGE_TAG $BACKEND_DIR
      - docker tag $BACKEND_REPO:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

  post_build:
    commands:
      - echo Pushing Docker images to ECR...
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG
      - docker push ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG

      - echo Preparing Kubernetes manifest output directory...
      - mkdir -p k8s-out

      # --- FRONTEND ---
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$FRONTEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/09-frontend-deployment.yaml > k8s-out/frontend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/10-frontend-service.yaml k8s-out/frontend-service.yaml

      # --- BACKEND ---
      - sed "s|IMAGE_PLACEHOLDER|${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/$BACKEND_REPO:$IMAGE_TAG|g" $K8S_MANIFEST_DIR/07-backend-deployment.yaml > k8s-out/backend-deployment.yaml
      - cp $K8S_MANIFEST_DIR/08-backend-service.yaml k8s-out/backend-service.yaml

      # --- DATABASE, SECRETS, CONFIGMAP, NAMESPACE ---
      - cp $K8S_MANIFEST_DIR/00-namespace.yaml k8s-out/namespace.yaml || true
      - cp $K8S_MANIFEST_DIR/01-configmap.yaml k8s-out/configmap.yaml || true
      - cp $K8S_MANIFEST_DIR/02-secrets.yaml k8s-out/secrets.yaml || true

      # --- INGRESS, HPA, NETWORK POLICY ---
      - cp $K8S_MANIFEST_DIR/11-ingress.yaml k8s-out/ingress.yaml || true
      - cp $K8S_MANIFEST_DIR/12-hpa.yaml k8s-out/hpa.yaml || true
      - cp $K8S_MANIFEST_DIR/13-network-policy.yaml k8s-out/network-policy.yaml || true

      # --- DEBUG ---
      - echo "Final list of generated Kubernetes YAML files:"
      - find k8s-out/

      # --- GRANT EKS ACCESS TO IAM USER ---
#      - echo "Updating aws-auth configmap in EKS cluster..."
 #     - aws eks update-kubeconfig --region $REGION --name $EKS_CLUSTER_NAME
 #     - |
  #      kubectl get configmap aws-auth -n kube-system -o yaml | yq eval '.data.mapUsers' - > current-users.yaml
   #   - |
  #      echo "- userarn: ${IAM_USER_ARN}
#  username: terraform-user
 # groups:
  #  - system:masters" >> new-user.yaml
   #   - |
    #    echo "data:" > aws-auth-patch.yaml
     #   echo "  mapUsers: |" >> aws-auth-patch.yaml
     #   cat current-users.yaml new-user.yaml | sed 's/^/    /' >> aws-auth-patch.yaml
  #    - |
   #     kubectl patch configmap aws-auth -n kube-system --patch "$(cat aws-auth-patch.yaml)"

      # --- CONFIGURE AWS LOAD BALANCER CONTROLLER ---
      - echo "Configuring AWS Load Balancer Controller..."
      - curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json
      - aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy4 --policy-document file://iam_policy.json || true # Added || true to prevent build failure if policy already exists
      - eksctl utils associate-iam-oidc-provider --region=$REGION --cluster=$EKS_CLUSTER_NAME --approve # Replaced hardcoded region/cluster with variables
      - eksctl create iamserviceaccount --cluster=$EKS_CLUSTER_NAME --namespace=kube-system --name=aws-load-balancer-controller --role-name AmazonEKSLoadBalancerControllerRole2 --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy4 --approve --region=$REGION || true # Replaced hardcoded account/region/cluster with variables, added || true
      - echo "Installing Helm..."
      # Instead of snap, directly download and install helm
      - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - helm repo add eks https://aws.github.io/eks-charts
      - helm repo update eks
      - helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=my-cluster  --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller

artifacts:
  base-directory: k8s-out
  discard-paths: yes
  files:
    - '**/*.yaml'

cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'backend/node_modules/**/*'
